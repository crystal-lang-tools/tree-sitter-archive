================
Class definition
================

class MyClass; end

class MyClass
end

class MyClass < MySuperClass
end

class MyClass::MyOtherClass
  "string"
  "string2"
end

abstract class MyClass
end

private class MyClass
end

private abstract class MyClass
end

class MyClass(T)
end

class MyClass(Param) < MySuperClass
end

class MyClass < MySuperClass(Param)
end

class MyClass(Param, Param(Param, Param))
end
---

(source_file
  (class
    (type_name
      (constant)))
  (class
    (type_name
      (constant)))
  (class
    (type_name
      (constant))
    (inherit
      (type_name
        (constant))))
  (class
    (type_name
      (constant))
    (string
      (quoted_string))
    (string
      (quoted_string)))
  (class
    (abstract)
    (type_name
      (constant)))
  (class
    (private)
    (type_name
      (constant)))
  (class
    (private)
    (abstract)
    (type_name
      (constant)))
  (class
    (type_name
      (constant)
      (generics
        (constant))))
  (class
    (type_name
      (constant)
      (generics
        (constant)))
    (inherit
      (type_name
        (constant))))
  (class
    (type_name
      (constant))
    (inherit
      (type_name
        (constant)
        (generics
          (constant)))))
  (class
    (type_name
      (constant)
      (generics
        (constant)
        (type_name
          (constant)
          (generics
            (constant)
            (type_name
              (constant))))))))

=================
Struct definition
=================

struct MyStruct; end

struct MyStruct
end

struct MyStruct < AnotherStruct
end

struct MyStruct::MyOtherStruct
  "string"
end

abstract struct MyStruct
end

private struct MyStruct
end

private abstract struct MyStruct
end

class MyStruct(Param)
end

class MyStruct(Param) < SuperStruct
end

class MyStruct < SuperStruct(Param)
end

---

(source_file
  (struct
    (type_name
      (constant)))
  (struct
    (type_name
      (constant)))
  (struct
    (type_name
      (constant))
    (inherit
      (type_name
        (constant))))
  (struct
    (type_name
      (constant))
    (string
      (quoted_string)))
  (struct
    (abstract)
    (type_name
      (constant)))
  (struct
    (private)
    (type_name
      (constant)))
  (struct
    (private)
    (abstract)
    (type_name
      (constant)))
  (class
    (type_name
      (constant)
      (generics
        (constant))))
  (class
    (type_name
      (constant)
      (generics
        (constant)))
    (inherit
      (type_name
        (constant))))
  (class
    (type_name
      (constant))
    (inherit
      (type_name
        (constant)
        (generics
          (constant))))))

=================
Module definition
=================

module MyMod; end

module MyMod
end

module MyMod::MyOtherMod
	1
	2
	3
	4
end

private module MyMod
end

module MyMod(Param)
end

module MyMod(Param, Param)
end

---

(source_file
  (module
    (type_name
      (constant)))
  (module
    (type_name
      (constant)))
  (module
    (type_name
      (constant))
    (integer)
    (integer)
    (integer)
    (integer))
  (module
    (private)
    (type_name
      (constant)))
  (module
    (type_name
      (constant)
      (generics
        (constant))))
  (module
    (type_name
      (constant)
      (generics
        (constant)
        (type_name
          (constant))))))

==================
Method definitions
==================

def empty
end

def empty()
end

def say : Nil
	"hello world"
end

def add(a, b)
	a + b
end

def add(a, b,)
end

def foo(type : ::Module::Generic(T)) : ::Module::Generic(T) forall T
end

private def greet(name : String) : Nil
	"Greetings, " + name
end

protected def add(a : T, b : T) : T forall T
	a + b
end

abstract def foo

private abstract def bar(type : T) forall T

protected abstract def baz(type : T) : U forall T, U

---

(source_file
  (def
    (identifier))
  (def
    (identifier))
  (def
    (identifier)
    (type_name
      (constant))
    (string
      (quoted_string)))
  (def
    (identifier)
    (method_param
      (identifier))
    (method_param
      (identifier))
    (binary_operation
      (identifier)
      (operator)
      (identifier)))
  (def
    (identifier)
    (method_param
      (identifier))
    (method_param
      (identifier)))
  (def
    (identifier)
    (method_param
      (identifier)
      (type_name
        (constant)
        (generics
          (constant))))
    (type_name
      (constant)
      (generics
        (constant)))
    (constant))
  (def
    (private)
    (identifier)
    (method_param
      (identifier)
      (type_name
        (constant)))
    (type_name
      (constant))
    (binary_operation
      (string
        (quoted_string))
      (operator)
      (identifier)))
  (def
    (protected)
    (identifier)
    (method_param
      (identifier)
      (type_name
        (constant)))
    (method_param
      (identifier)
      (type_name
        (constant)))
    (type_name
      (constant))
    (constant)
    (binary_operation
      (identifier)
      (operator)
      (identifier)))
  (abstract_def
    (identifier))
  (abstract_def
    (private)
    (identifier)
    (method_param
      (identifier)
      (type_name
        (constant)))
    (constant))
  (abstract_def
    (protected)
    (identifier)
    (method_param
      (identifier)
      (type_name
        (constant)))
    (type_name
      (constant))
    (constant)
    (type_name
      (constant))))

=================
Require statement
=================

require "example"

require "json"
require "yaml"

1 + 2
require "big"

---

(source_file
  (require
    (quoted_string))
  (require
    (quoted_string))
  (require
    (quoted_string))
  (binary_operation
    (integer)
    (operator)
    (integer))
  (require
    (quoted_string)))

=================
Include statement
=================

include ABC

module A
  include ABC
end

module A::B
  include ABC
end

---

(source_file
  (include
    (constant))
  (module
    (type_name
      (constant))
    (include
      (constant)))
  (module
    (type_name
      (constant))
    (include
      (constant))))

================
Extend statement
================

extend Abc

module A
  extend Abc
end

module A::B
  extend self
end

---

(source_file
  (extend
    (constant))
  (module
    (type_name
      (constant))
    (extend
      (constant)))
  (module
    (type_name
      (constant))
    (extend
      (self))))
